#include "pch.h"
#include "判断.h"

#include "读写.h"
#include "游戏Call.h"
#include "引用.h"
#include "文件.h"
#include "数组.h"
#include "配置.h"
#include "加密.h"

int 解密(__int64 数据指针)
{
	__int64 temp = _ReadLong(数据指针);
	temp = temp ^ 0x1F2A025C;
	temp -= 4;
	return (int)temp;
}

VOID 加密(__int64 数据指针, int 修改数值)
{
	数据指针 += 4;
	数据指针 = 数据指针 ^ 0x1F2A025C;
	_WriteLong(数据指针, 数据指针);
}

// 0选角 1城镇 2选图 3图内 5选择频道
int 取游戏状态()
{
	return  _ReadInt(游戏状态);
}

bool 取是否城镇()
{
	if (_ReadLong(_ReadLong(取人物基质()) + 地图偏移) == 0)
	{
		return true;
	}
	return false;
}

bool 取是否开门()
{
	if (解密(_ReadLong(_ReadLong(_ReadLong(取人物基质()) + 地图偏移) + 16) + 是否开门) == 0)
	{
		return true;
	}
	return false;
}

bool 取是否BOSS房()
{
	坐标型 当前 = 取当前房间();
	坐标型 BOSS = 取BOSS房间();
	if (当前.x == BOSS.x && 当前.y == BOSS.y)
	{
		return true;
	}
	return false;
}

bool 取是否通关()
{
	__int64 房间数据 = _ReadLong(_ReadLong(_ReadLong(房间编号) + 时间基址) + 门型偏移);
	int 判断数值 = _ReadInt(房间数据 + 篝火判断);
	if(判断数值 == 2 || 判断数值 == 0) 
	{
		return true;
	}
	return false;
}
坐标型 取BOSS房间()
{
	坐标型 返回数据;
	__int64 房间数据 = _ReadLong(_ReadLong(_ReadLong(房间编号) + 时间基址) + 门型偏移);
	返回数据.x = 解密(房间数据 + BOSS房间X);
	返回数据.y = 解密(房间数据 + BOSS房间Y);
	return 返回数据;
}

坐标型 取当前房间() 
{
	坐标型 返回数据;
	__int64 房间数据 = _ReadLong(_ReadLong(_ReadLong(房间编号) + 时间基址) + 门型偏移);
	返回数据.x = _ReadInt(房间数据 + 当前房间X);
	返回数据.y = _ReadInt(房间数据 + 当前房间Y);
	return 返回数据;
}

int 取地图编号() 
{
	return _ReadInt(副本编号);
}

int 取疲劳值()
{
	return 解密(最大疲劳) - 解密(当前疲劳);
}


CString 取地图名称()
{
	__int64 房间数据 = _ReadLong(_ReadLong(_ReadLong(房间编号) + 时间基址) + 门型偏移);
	return _UnicodeToAnsi(_ReadByteArr(_ReadLong(房间数据 + 地图名称), 52));
}

bool 判断_过滤拾取(wstring 物品名称)
{
	wstring 拾取过滤 = L"橙子-哈密瓜-草莓-碎布片-生锈的铁片-破旧的皮革-最下级砥石-最下级硬化剂-风化的碎骨-入门HP药剂-入门MP药剂-普通HP药剂-普通MP药剂-肉干-命运硬币-轰爆弹-爆弹-燃烧瓶-精灵气息-遗留的水晶碎片-远古王国的遗物-古城遗物-蘑菇袍子-浮游石原石-天界珍珠-越桔-魔力之花-野草莓-朗姆酒-裂空镖-甜瓜-飞盘 2-神圣葡萄酒-撒勒的印章-克尔顿的印章-肉块-天空树果实-石头-圣杯-天才的地图碎片-柴火-远古骑士的盔甲-无尽的永恒-使徒的气息-坚硬的龟壳-遗留的水晶碎片-突变苎麻花叶-苎麻花叶-副船长的戒指-步枪零件-黑色龙舌兰酒-烤硬的黑面包-虚空魔石碎片-格林赛罗斯的果核-跃翔药剂-突变草莓-暗黑城特产干酪-卡勒特勋章-迷幻晶石-高级钻石硬币-钻石硬币-混沌魔石碎片-碳结晶体-数据芯片-神秘的胶囊碎片-阳光硬币-魔刹石-命运硬币-砂砾-军用回旋镖-飞镖-砂砾-精灵香精-鸡腿-黑曜石-血滴石-紫玛瑙-金刚石-海蓝宝石-光辉魔石碎片-光辉魔石-次元碎片-卡勒特指令书-GBL教古书-凯丽的杂物-烤蘑菇-蘑菇酒-远古生命药剂-祝福之手-灵界之石-新手HP药剂-新手MP药剂-入门HP药剂-入门MP药剂-达人HP药剂-达人MP药剂-夜光石";
	vector<wstring>过滤数组;
	分割文本(拾取过滤, 过滤数组, L"-");
	for (size_t i = 0; i < 过滤数组.size(); i++)
	{
		if (物品名称.find(过滤数组[i]) != wstring::npos)
		{
			return true;
		}
	}
	return false;
}


坐标型 读取类型坐标(ULONG64 参_指针)
{
	ULONG64 指针; 坐标型 坐标;
	if (*(ULONG*)(参_指针 + 类型偏移) == 273)
	{
		指针 = *(ULONG64*)(参_指针 + 读取坐标);
		坐标.x = (int)*(float*)(指针 + 0);
		坐标.y = (int)*(float*)(指针 + 4);
		坐标.z = (int)*(float*)(指针 + 8);
	}
	else
	{
		指针 = *(ULONG64*)(参_指针 + 对象坐标);
		坐标.x = (int)*(float*)(指针 + 32);
		坐标.y = (int)*(float*)(指针 + 36);
		坐标.z = (int)*(float*)(指针 + 40);
	}
	return 坐标;
}



bool 是否有物品()
{

	遍历数据 拾取;

	拾取.人物指针 = *(ULONG64*)人物基址;
	拾取.地图指针 = *(ULONG64*)(拾取.人物指针 + 地图偏移);
	拾取.首地址 = *(ULONG64*)(拾取.地图指针 + 地图开始2);
	拾取.尾地址 = *(ULONG64*)(拾取.地图指针 + 地图结束2);
	拾取.遍历数量 = (int)((拾取.尾地址 - 拾取.首地址) / 8);
	for (拾取.遍历次数 = NULL; 拾取.遍历次数 < 拾取.遍历数量; ++拾取.遍历次数)
	{
		拾取.遍历指针 = *(ULONG64*)(拾取.首地址 + 拾取.遍历次数 * 8);
		拾取.遍历类型 = *(ULONG*)(拾取.遍历指针 + 类型偏移);
		拾取.遍历阵营 = *(ULONG*)(拾取.遍历指针 + 阵营偏移);
		if (拾取.遍历阵营 == 200 && 拾取.遍历类型 == 289)
		{
			拾取.物品指针 = *(ULONG64*)(拾取.遍历指针 + 地面物品);
			拾取.物品名称 = (wchar_t*)*(ULONG64*)(拾取.物品指针 + 装备名称);
			if (判断_过滤拾取(拾取.物品名称))
			{
				continue;
			}
			else {
				return true;
			}
		}
	}
	return false;
}

bool 判断_坐标相等(坐标型 索引_1, 坐标型 索引_2)
{
	if (索引_1.x == 索引_2.x && 索引_1.y == 索引_2.y)
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool 是否怪物()
{
	遍历数据 跟随;
	跟随.人物指针 = *(ULONG64*)人物基址;
	跟随.地图指针 = *(ULONG64*)(跟随.人物指针 + 地图偏移);
	跟随.首地址 = *(ULONG64*)(跟随.地图指针 + 地图开始2);
	跟随.尾地址 = *(ULONG64*)(跟随.地图指针 + 地图结束2);
	跟随.遍历数量 = (int)((跟随.尾地址 - 跟随.首地址) / 8);
	for (跟随.遍历次数 = NULL; 跟随.遍历次数 < 跟随.遍历数量; 跟随.遍历次数++)
	{
		跟随.遍历指针 = *(ULONG64*)(跟随.首地址 + 跟随.遍历次数 * 8);
		跟随.遍历类型 = *(ULONG*)(跟随.遍历指针 + 类型偏移);
		跟随.遍历阵营 = *(ULONG*)(跟随.遍历指针 + 阵营偏移);
		跟随.遍历血量 = *(ULONG64*)(跟随.遍历指针 + 怪物血量);

		if (跟随.遍历阵营 != 0)
		{
			if (跟随.遍历类型 == 529 || 跟随.遍历类型 == 273 || 跟随.遍历类型 == 545)
			{
				if (跟随.遍历血量 > 0)
				{
					return true;
				}
			}
		}
	}

	return false;
}

bool 取是否翻牌()
{
	遍历数据 翻牌;
	翻牌.人物指针 = *(ULONG64*)人物基址;
	翻牌.地图指针 = *(ULONG64*)(翻牌.人物指针 + 地图偏移);
	翻牌.首地址 = *(ULONG64*)(翻牌.地图指针 + 地图开始2);
	翻牌.尾地址 = *(ULONG64*)(翻牌.地图指针 + 地图结束2);
	翻牌.遍历数量 = (int)((翻牌.尾地址 - 翻牌.首地址) / 8);
	for (翻牌.遍历次数 = NULL; 翻牌.遍历次数 < 翻牌.遍历数量; 翻牌.遍历次数++)
	{
		翻牌.遍历指针 = *(ULONG64*)(翻牌.首地址 + 翻牌.遍历次数 * 8);
		翻牌.遍历类型 = *(ULONG*)(翻牌.遍历指针 + 类型偏移);
		翻牌.遍历阵营 = *(ULONG*)(翻牌.遍历指针 + 阵营偏移);
		翻牌.遍历代码 = *(ULONG*)(翻牌.遍历指针 + 代码偏移);
		if (翻牌.遍历类型 == 33 || 翻牌.遍历代码 == 48026)
		{
			return true;
		}
	}
	return false;
}

int 取角色等级()
{
	return *(ULONG*)角色等级;
}

int 取角色数量()
{
	return 	*(ULONG*)(*(ULONG64*)(*(ULONG64*)角色基址 + 角色初始指针) + 角色总数偏移);
}

int 取角色位置()
{
	return *(ULONG*)(*(ULONG64*)(*(ULONG64*)角色基址 + 角色初始指针) + 普通角色位置);
}

bool 取是否对话框()
{
	if (*(ULONG*)对话基址B == 1 || *(ULONG*)对话基址 == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool 取是否制裁()
{
	if (*(ULONG*)制裁基址 != 0)
	{
		return true;
	}
	else
	{
		return false;
	}
}


int 判断地图(int 副本编号)
{
	if (副本编号 == 100000002 ||
		副本编号 == 100000214 ||
		副本编号 == 100000003 ||
		副本编号 == 100000177 ||
		副本编号 == 100000176 ||
		副本编号 == 100000178 ||
		副本编号 == 100000179 ||
		副本编号 == 100000212 ||
		副本编号 == 100000215 ||
		副本编号 == 100000199 ||
		副本编号 == 100000209
		)
	{
		if (取疲劳值() < 8)
		{
			return 3;
		}
	}
	return 0;
}

void 跳过对话()
{
	while (取是否对话框() && 读配置(配置.自动模式) == 2)
	{
		keybd_event(27, MapVirtualKey(27, 0), 0, 0);//按下
		Sleep(50);
		keybd_event(27, MapVirtualKey(27, 0), KEYEVENTF_KEYUP, 0);//松开
		Sleep(100);
		keybd_event(32, MapVirtualKey(32, 0), 0, 0);//按下
		Sleep(50);
		keybd_event(32, MapVirtualKey(32, 0), KEYEVENTF_KEYUP, 0);//松开
		Sleep(100);
	}
}

ULONG 取负重数值()
{
	ULONG 目前负重 = 超级解密(*(ULONG64*)(*(ULONG64*)人物基址 + 物品栏) + 当前负重);
	ULONG 承受负重 = 超级解密(*(ULONG64*)人物基址 + 最大负重);

	return (ULONG)(目前负重 / 承受负重 * 100);
}

int 等级地图()
{
	int 局_角色等级 = 取角色等级();
	if (局_角色等级 <= 17)
	{
		if (局_角色等级 <= 3)
			return (3);//幽暗密林
		if (局_角色等级 <= 5)
			return (5);//雷鸣废墟
		if (局_角色等级 <= 8)
			return (6);//猛毒雷鸣废墟
		if (局_角色等级 <= 11)
			return (9);//冰霜幽暗密林
		if (局_角色等级 <= 13)
			return (7);//格拉卡
		if (局_角色等级 <= 15)
			return (8);//烈焰格拉卡
		if (局_角色等级 <= 17)
			return (1000);//暗黑雷鸣废墟
	}
	else if (局_角色等级 <= 23)
	{
		if (局_角色等级 <= 18)
			return (10);//龙人之塔
		if (局_角色等级 <= 19)
			return (12);//人偶玄关
		if (局_角色等级 <= 20)
			return (13);//石巨人塔
		if (局_角色等级 <= 21)
			return (14);//黑暗玄廊
		if (局_角色等级 <= 22)
			return (17);//城主宫殿
		if (局_角色等级 <= 23)
			return (15);//悬空城
	}
	else if (局_角色等级 <= 29)
	{
		if (局_角色等级 <= 24)
			return (17);//神殿外围
		if (局_角色等级 <= 25)
			return (22);//树精丛林
		if (局_角色等级 <= 26)
			return (23);//炼狱
		if (局_角色等级 <= 27)
			return (24);//极昼
		if (局_角色等级 <= 28)
			return (25);//第一脊椎
		if (局_角色等级 <= 29)
			return (26);//第二脊椎
	}
	else if (局_角色等级 <= 35)
	{
		if (局_角色等级 <= 30)
			return (27);//浅栖之地
		if (局_角色等级 <= 31)
			return (32);//蜘蛛洞穴
		if (局_角色等级 <= 32)
			return (150);//蜘蛛王国
		if (局_角色等级 <= 33)
			return (151);//英雄冢
		if (局_角色等级 <= 34)
			return (35);//暗精灵墓地
		if (局_角色等级 <= 35)
			return (34);//熔岩穴
	}
	else if (局_角色等级 <= 39)
	{
		if (局_角色等级 <= 36)
			return (152);//暴君的祭坛
		if (局_角色等级 <= 37)
			return (153);//黄金矿洞
		if (局_角色等级 <= 38)
			return (154);//远古墓穴深处
		if (局_角色等级 <= 39)
			return (154);//远古墓穴深处
	}
	else if (局_角色等级 <= 45)
	{
		if (局_角色等级 <= 40)
			return (40);//山脊
		if (局_角色等级 <= 41)
			return (41);//冰心少年
		if (局_角色等级 <= 42)
			return (42);//利库天井
		if (局_角色等级 <= 44)
			return (43);//白色废墟
		if (局_角色等级 <= 45)
			return (141);//布万加的修炼场
	}
	else if (局_角色等级 <= 49)
	{
		if (局_角色等级 <= 46)
			return (141);//绿都格罗兹尼
		if (局_角色等级 <= 47)
			return (50);//堕落的盗贼
		if (局_角色等级 <= 48)
			return (50);//堕落的盗贼
		if (局_角色等级 <= 49)
			return (52);//血蝴蝶之舞
	}
	else if (局_角色等级 <= 53)
	{
		if (局_角色等级 <= 50)
			return (52);//血蝴蝶之舞
		if (局_角色等级 <= 51)
			return (145);//冰晶森林
		if (局_角色等级 <= 52)
			return (145);//水晶矿脉
		if (局_角色等级 <= 53)
			return (148);//水晶矿脉
	}
	else if (局_角色等级 <= 58)
	{
		if (局_角色等级 <= 54)
			return (148);//蘑菇庄园
		if (局_角色等级 <= 55)
			return (148);//蚁后的巢穴
		if (局_角色等级 <= 56)
			return (158);//腐烂之地
		if (局_角色等级 <= 57)
			return (159);//赫顿玛尔旧街区
		if (局_角色等级 <= 58)
			return (159);//赫顿玛尔旧街区
	}
	else if (局_角色等级 <= 62)
	{
		if (局_角色等级 <= 59)
			return (161);//人鱼国度
		if (局_角色等级 <= 58)
			return (161);//鲨鱼栖息地
		if (局_角色等级 <= 60)
			return (163);//GBL女神殿
		if (局_角色等级 <= 61)
			return (164);//树精繁殖地
		if (局_角色等级 <= 62)
			return (164);//树精繁殖地
	}
	else if (局_角色等级 <= 70)
	{
		if (局_角色等级 <= 63)
			return (80);//根特外围
		if (局_角色等级 <= 64)
			return (81);//根特东门
		if (局_角色等级 <= 65)
			return (82);//根特南门
		if (局_角色等级 <= 66)
			return (83);//夜间袭击战
		if (局_角色等级 <= 67)
			return (84);//补给线阻断战
		if (局_角色等级 <= 68)
			return (85);//追击歼灭战
		if (局_角色等级 <= 69)
			return (85);//根特防御战
		if (局_角色等级 <= 70)
			return (85);//哈尔特山
	}
	else if (局_角色等级 <= 74)
	{
		if (局_角色等级 <= 71)
			return (86);//列车上的海贼
		if (局_角色等级 <= 72)
			return (87);//夺回西部线
		if (局_角色等级 <= 73)
			return (92);//雾都赫伊斯
		if (局_角色等级 <= 74)
			return (93);//阿登高地
	}
	else if (局_角色等级 <= 80)
	{
		if (局_角色等级 <= 75)
			return (93);//阿登高地
		if (局_角色等级 <= 76)
			return (70);//格兰之火
		if (局_角色等级 <= 77)
			return (71);//瘟疫之源
		if (局_角色等级 <= 78)
			return (72);//卡勒特之初
		if (局_角色等级 <= 79)
			return (74);//绝密区域
		if (局_角色等级 <= 80)
			return (76);//凛冬
	}
	else if (局_角色等级 <= 86)
	{
		if (局_角色等级 <= 80)
			return (76);//克雷发电站
		if (局_角色等级 <= 81)
			return (102);//普鲁兹发电站
		if (局_角色等级 <= 82)
			return (103);//特伦斯发电站
		if (局_角色等级 <= 85)
			return (104);//格蓝迪发电站
		if (局_角色等级 <= 86)
			return (104);//格蓝迪发电站
	}
	else if (局_角色等级 <= 91)
	{
		if (局_角色等级 <= 87)
			return (192);//钢铁之臂
		if (局_角色等级 <= 88)
			return (192);//钢铁之臂
		if (局_角色等级 <= 89)
			return (194);//光之舞会
		if (局_角色等级 <= 90)
			return (194);//光之舞会
		if (局_角色等级 <= 91)
			return (314);//红色魔女之森
	}
	else if (局_角色等级 <= 95)
	{
		if (局_角色等级 <= 92)
			return (291100268);//亡命杀镇
		if (局_角色等级 <= 93)
			return (291100268);//亡命杀镇
		if (局_角色等级 <= 94)
			return (291100293);//全蚀市场
		if (局_角色等级 <= 95)
			return (291100293);//全蚀市场
	}
	else if (局_角色等级 <= 100)
	{
		if (局_角色等级 <= 96)
			return (100000002);//根特皇宫
		if (局_角色等级 <= 97)
			return (100000002);//根特皇宫
		if (局_角色等级 <= 98)
			return (100000176);//无底坑道
		if (局_角色等级 <= 99)
			return (100000178);//无底坑道
		if (局_角色等级 <= 100)
			return (100000179);//暗黑神殿
	}
	return (1);
}